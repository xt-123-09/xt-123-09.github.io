<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2013/07/13/hello-world/</url>
    <content><![CDATA[<h1 id="第一篇hexo博客"><a href="#第一篇hexo博客" class="headerlink" title="第一篇hexo博客"></a>第一篇hexo博客</h1><h2 id="关于hexo的github托管"><a href="#关于hexo的github托管" class="headerlink" title="关于hexo的github托管"></a>关于hexo的github托管</h2><p>在github上创建仓库 需要与账号同名 即账号.github.io</p>
<p>git提交到远程github 按照github仓库的命令提示一步一步来 这里注意必须是github原网站 那些镜像站会有各种问题</p>
<p>获取github ssh密钥  并填setting写密钥</p>
<p>然后修改_config.yml文件 修改deploy</p>
<p>然后git中执行 hexo d -g 提交到github</p>
<p>然后访问 账号.github.io 即可看到博客</p>
<p>修改博客 执行 hexo g -d 提交到github</p>
<p>访问 账号.github.io 即可看到修改后的博客</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp</title>
    <url>/2013/07/13/uniapp/</url>
    <content><![CDATA[<h1 id="Uniapp使用指南"><a href="#Uniapp使用指南" class="headerlink" title="Uniapp使用指南"></a>Uniapp使用指南</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用npm或yarn安装Uniapp CLI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure>

<p>安装完后，使用以下命令创建一个新项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create my-uniapp-project</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在项目目录下，运行以下命令启动开发服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev:h5</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn dev:h5</span><br></pre></td></tr></table></figure>

<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>使用以下命令构建应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build:h5</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn build:h5</span><br></pre></td></tr></table></figure>

<p>构建完成后，将生成的dist文件夹中的内容部署到服务器上即可。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>如何配置全局变量？</li>
</ol>
<p>在<code>main.js</code>中使用<code>Vue.prototype</code>定义全局变量。</p>
<ol start="2">
<li>如何使用<code>uni.request</code>发起网络请求？</li>
</ol>
<p>在页面或组件中使用<code>uni.request</code>方法即可。</p>
<ol start="3">
<li>如何使用<code>uni.navigateTo</code>进行页面跳转？</li>
</ol>
<p>在页面或组件中使用<code>uni.navigateTo</code>方法即可。</p>
<ol start="4">
<li>如何使用<code>uni.showToast</code>显示提示信息？</li>
</ol>
<p>在页面或组件中使用<code>uni.showToast</code>方法即可。</p>
<ol start="5">
<li>如何使用<code>uni.showLoading</code>显示加载中提示？</li>
</ol>
<p>在页面或组件中使用<code>uni.showLoading</code>方法即可。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Uniapp是一个使用Vue.js开发跨平台应用的框架，它提供了丰富的组件和API，使得开发者能够快速构建多端应用。通过学习Uniapp的使用指南，开发者可以轻松地使用Uniapp开发自己的跨平台应用。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://uniapp.dcloud.io/">Uniapp官方文档</a></li>
<li><a href="https://ask.dcloud.net.cn/">Uniapp社区</a></li>
<li><a href="https://vuejs.org/v2/guide/">Vue.js官方文档</a></li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 新增的知识</title>
    <url>/2013/07/13/Vue3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="Vue3-新增的知识"><a href="#Vue3-新增的知识" class="headerlink" title="Vue3 新增的知识"></a>Vue3 新增的知识</h1><h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><p>Vue3 引入了 Composition API，它是一种新的编写 Vue 组件的方式。Composition API 允许你使用函数来组织组件的逻辑，而不是将所有的逻辑都放在一个大的选项对象中。</p>
<p>使用 Composition API 的好处是：</p>
<ul>
<li>更灵活的组织组件的逻辑，可以更好地拆分和复用代码。</li>
<li>更易于测试和调试，因为每个函数都可以被单独测试和调试。</li>
<li>更易于维护和扩展，因为每个函数都有清晰的边界，可以更容易地理解和修改。</li>
</ul>
<h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><p>Vue3 引入了 Teleport 组件，它允许你将一个组件的模板渲染到指定的目标元素中。</p>
<p>使用 Teleport 的好处是：</p>
<ul>
<li>可以将组件的模板渲染到指定的目标元素中，而不是默认的父元素中。</li>
<li>可以将组件的模板渲染到指定的目标元素中，而不是默认的父元素中。</li>
<li>可以将组件的模板渲染到指定的目标元素中，而不是默认的父元素中。</li>
</ul>
<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>Vue3 引入了 Fragment 组件，它允许你将多个子节点封装到一个父节点中，而不是将所有子节点都渲染到同一个父节点中。</p>
<p>使用 Fragment 的好处是：</p>
<ul>
<li>可以将多个子节点封装到一个父节点中，而不是将所有子节点都渲染到同一个父节点中。</li>
<li>可以将多个子节点封装到一个父节点中，而不是将所有子节点都渲染到同一个父节点中。</li>
<li>可以将多个子节点封装到一个父节点中，而不是将所有子节点都渲染到同一个父节点中。</li>
</ul>
<h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><p>Vue3 引入了 Suspense 组件，它允许你定义组件的加载状态，并在加载状态时显示一个占位符。</p>
<p>使用 Suspense 的好处是：    </p>
<ul>
<li>可以在加载状态时显示一个占位符，提高用户体验。</li>
<li>可以在加载状态时显示一个占位符，提高用户体验。</li>
<li>可以在加载状态时显示一个占位符，提高用户体验。</li>
</ul>
<h2 id="其他新增的知识"><a href="#其他新增的知识" class="headerlink" title="其他新增的知识"></a>其他新增的知识</h2><ul>
<li>响应式系统（Reactivity System）</li>
<li>生命周期钩子（Lifecycle Hooks）</li>
<li>组件选项（Component Options）</li>
<li>模板语法（Template Syntax）</li>
<li>渲染函数（Render Functions）</li>
<li>工具函数（Utilities）</li>
<li>……</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vue3 引入了 Composition API、Teleport、Fragment、Suspense 等新特性，它们提高了 Vue 组件的可复用性和可维护性。同时，Vue3 还引入了响应式系统、生命周期钩子、组件选项、模板语法、渲染函数、工具函数等新特性，使 Vue 更加灵活和强大。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://v3.vuejs.org/">Vue3 文档</a></li>
<li><a href="https://blog.vuejs.org/">Vue3 官方博客</a></li>
<li><a href="https://forum.vuejs.org/">Vue3 官方论坛</a></li>
<li><a href="https://community.vuejs.org/">Vue3 官方社区</a></li>
<li><a href="https://github.com/vuejs/vue-next">Vue3 官方 GitHub 仓库</a></li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
